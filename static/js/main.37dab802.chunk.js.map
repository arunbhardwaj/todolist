{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","state","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","toggleComplete","bind","onClick","deleteTodo","btnStyle","Component","color","border","borderRadius","cursor","float","textAlign","fontSize","Todos","todos","map","key","Header","headerStyle","to","AddTodo","todoField","updateText","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","placeholder","flex","height","className","About","Fragment","href","App","componentDidMount","fetch","then","response","json","method","res","filter","newTodo","uuid","v4","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.37dab802.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass TodoItem extends Component {\r\n    state = {}\r\n\r\n    getStyle = () => {\r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: '5px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n        }\r\n    }\r\n\r\n// {/* uses component drilling? */}\r\n    render() {\r\n        // destructuring\r\n        const {id, title} = this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                    <input \r\n                        type=\"checkbox\" \r\n                        onChange={this.props.toggleComplete.bind(this, id)} \r\n                    />\r\n                    {title}\r\n                    <button \r\n                        onClick={this.props.deleteTodo.bind(this, id)} \r\n                        style={btnStyle}>\r\n                            x\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    toggleComplete: PropTypes.func.isRequired,\r\n    deleteTodo: PropTypes.func.isRequired\r\n}\r\n\r\n// const itemStyle = {\r\n//     backgroundColor: '#f4f4f4'\r\n// }\r\n\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: '#ffffff',\r\n    border: 'none',\r\n    padding: '3px 7px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right',\r\n    textAlign: 'center',\r\n    fontSize: '13px'\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n    render() {\r\n        return this.props.todos.map(todo => (\r\n            //Creates TodoItem\r\n            <TodoItem key={todo.id} todo={todo} deleteTodo={this.props.deleteTodo} toggleComplete={this.props.toggleComplete}/>\r\n        ));\r\n\r\n    }\r\n}\r\n\r\n//Prop Types\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    toggleComplete: PropTypes.func.isRequired,\r\n    deleteTodo: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Todos;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>To-Do List</h1>\r\n            <Link style={{ color: 'white'}} to=\"/todolist/\">Home</Link> | <Link to=\"/about\" style={{ color: 'white'}}>About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: 'white',\r\n    padding: '10px',\r\n    textAlign: 'center'\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class AddTodo extends Component {\r\n    state = {\r\n        todoField: ''\r\n    }\r\n\r\n    // \r\n    updateText = (e) => {\r\n        this.setState(\r\n            {\r\n                [e.target.name]: e.target.value\r\n            }\r\n        );\r\n    }\r\n\r\n    // Adds the current todo to the list. \r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.todoField);\r\n        this.setState({\r\n            todoField: ''\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style={{display: 'flex' }}>\r\n                <input \r\n                    type='text' \r\n                    name='todoField' \r\n                    placeholder=\"Add to-do...\"\r\n                    style={{flex: '10', padding: '1px', height: '30px' }}\r\n                    value={this.state.todoField}\r\n                    onChange={this.updateText}\r\n                />\r\n                <input \r\n                    className='btn'\r\n                    type='submit' \r\n                    value='Submit'\r\n                    style= {{flex: '1' }}\r\n                    \r\n                />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nAddTodo.propTypes = {\r\n    addTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from 'react';\r\n\r\nexport default function About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p> This is a simple to-do list app created using React and JSONPlaceHolder. Click <a href=\"https://arunbhardwaj.github.io/todolist/\">Home</a> to get started! </p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Todos from './components/Todos';\r\nimport Header from './components/layout/Header';\r\nimport AddTodo from './components/AddTodo';\r\nimport uuid from 'uuid';\r\nimport About from './components/pages/About';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        todos: []\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        fetch('https://jsonplaceholder.typicode.com/todos?_limit=7')\r\n            .then(response => response.json())\r\n            .then(json => this.setState({ todos: json}))\r\n    }\r\n\r\n    // This toggles complete status and (un)crosses out todo. \r\n    toggleComplete = (id) => {\r\n        this.setState(\r\n            { \r\n                todos: this.state.todos.map(todo => {\r\n                    if(todo.id === id) {\r\n                        todo.completed = !todo.completed\r\n                    } \r\n                    return todo;\r\n                } )\r\n            }\r\n        );\r\n    }\r\n\r\n    // Deletes a Todo in todos\r\n    deleteTodo = (id) => {\r\n        // Using JSONPlaceHolder to simulate retrieving and editing from a server. \r\n        fetch(`https://jsonplaceholder.typicode.com/todos/${id}`, {\r\n            method: 'DELETE'\r\n        }).then(res => this.setState({\r\n                todos: [...this.state.todos.filter( todo => todo.id !== id)]\r\n            }));\r\n\r\n        // Filters out a todo based on id\r\n        // this.setState(\r\n        //     { \r\n        //         todos: this.state.todos.filter( todo => todo.id !== id )\r\n        //     }\r\n        // );\r\n    }\r\n\r\n    // Adds a todo with a unique ID to the state\r\n    addTodo = (title) => {\r\n        const newTodo = {\r\n            id: uuid.v4(),\r\n            title,\r\n            completed: false\r\n        }\r\n\r\n        this.setState(\r\n            {\r\n                todos: [...this.state.todos, newTodo]\r\n            }\r\n        );\r\n        \r\n        // TODO: implement posting feature using jsonplaceholder\r\n        // const url = 'https://jsonplaceholder.typicode.com/posts';\r\n        \r\n        // const options = {\r\n        //     method: 'POST',\r\n        //     body: JSON.stringify(newTodo),\r\n        //     header: {\r\n        //         'Content-Type': 'application/json; charset=UTF-8'\r\n        //     }\r\n        // }\r\n\r\n        // fetch(url, options)\r\n        //     .then(res => res.json())\r\n        //     .then(json => this.setState(\r\n        //         {\r\n        //             todos: [...this.state.todos, json]\r\n        //         }\r\n        //     )).catch(err => {\r\n        //          console.error('Error: ', err);\r\n        //     });\r\n\r\n        \r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            // Must wrap everything in the Render method with Router\r\n            <Router>\r\n                <div className=\"App\">\r\n                    {/* we take the state in app and assign it as a property to the Todos component where we can work with it further */}\r\n                \r\n                        <Header />\r\n                        <Route exact path=\"/\" render={props => (\r\n                            <React.Fragment>\r\n                                <AddTodo addTodo={this.addTodo}/>\r\n                                <Todos todos={this.state.todos} toggleComplete={this.toggleComplete} deleteTodo={this.deleteTodo} />\r\n                            </React.Fragment>\r\n                        )} />\r\n                        <Route path=\"/about\" component={About} />\r\n                    \r\n                </div>\r\n                <div className=\"terms\">\r\n                    <text>Arun</text>\r\n                </div>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}